import { useState, useEffect } from "react";
import API from "../service/api";
import {XMarkIcon} from "@heroicons/react/24/outline";
import imageCompression from "browser-image-compression";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "../components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "../components/ui/dialog";
import { Button } from "../components/ui/button";
import { Input } from "../components/ui/input";
import { Badge } from "../components/ui/badge";
import { Search, Plus, Edit, Trash2, Eye, FilterX } from "lucide-react";

interface Product {
  _id: string;
  title: string;
  specs: string[];
  price: number;
  oldPrice?: number;
  discountPercentage?: number;
  image: string;
  stock: number;
  category: string;
  description: string | { [key: string]: string };
  status: "C√≤n h√†ng" | "S·∫Øp h·∫øt" | "H·∫øt h√†ng";
}

export default function Products() {
  const [search, setSearch] = useState("");
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [productToDelete, setProductToDelete] = useState<Product | null>(null);
  const [currentProduct, setCurrentProduct] = useState<Product | null>(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false); // Khai b√°o cho modal Th√™m s·∫£n ph·∫©m
  const [newProduct, setNewProduct] = useState<Product>({
    _id: "",
    title: "",
    specs: [],
    price: 0,
    stock: 0,
    category: "",
    description: {},
    status: "C√≤n h√†ng",
    image: "",
  });
  
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10); // S·ªë s·∫£n ph·∫©m m·ªói trang

  // T√≠nh to√°n s·∫£n ph·∫©m cho trang hi·ªán t·∫°i
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  

  // H√†m chuy·ªÉn trang
  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearch(e.target.value);
    setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu khi t√¨m ki·∫øm
  };

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const token = localStorage.getItem("token");
        if (!token) {
          console.error("Token kh√¥ng t·ªìn t·∫°i trong localStorage");
          setLoading(false);
          return;
        }

        const res = await API.get("/products", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (Array.isArray(res.data)) {
          setProducts(res.data);
        } else {
          console.error("D·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng:", res.data);
        }
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, []);

  // H√†m m·ªü modal ch·ªânh s·ª≠a s·∫£n ph·∫©m
  const handleOpenEditModal = (product: Product) => {
    setCurrentProduct(product);
    setIsEditModalOpen(true);
  };

  // H√†m m·ªü modal x√≥a s·∫£n ph·∫©m
  const handleOpenDeleteModal = (product: Product) => {
    setProductToDelete(product);
    setIsDeleteModalOpen(true);
  };

  
  
  // H√†m m·ªü modal th√™m s·∫£n ph·∫©m
  const handleOpenAddModal = () => {
    setNewProduct({
      _id: "",
      title: "",
      specs: [],
      price: 0,
      stock: 0,
      category: "",
      description: {},
      status: "" as "C√≤n h√†ng" | "S·∫Øp h·∫øt" | "H·∫øt h√†ng", // Explicitly cast to the union type
      image: "",
    });
    setIsAddModalOpen(true);
  };
  
  const filteredProducts = products.filter((product) =>
    product.title.toLowerCase().includes(search.toLowerCase()) ||
    product.specs.some(spec => spec.toLowerCase().includes(search.toLowerCase())) ||
    product.price.toString().toLowerCase().includes(search.toLowerCase())
  );
  const currentItems = filteredProducts.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredProducts.length / itemsPerPage);

  // Handle form input change for editing product
  const handleEditProductChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    if (!currentProduct) return;

    const { name, value } = e.target;

    // T·ª± ƒë·ªông c·∫≠p nh·∫≠t tr·∫°ng th√°i d·ª±a tr√™n stock
    if (name === "stock") {
      const stockValue = parseInt(value, 10);
      const updatedStatus =
        stockValue > 10 ? "C√≤n h√†ng" : stockValue > 0 ? "S·∫Øp h·∫øt" : "H·∫øt h√†ng";

      setCurrentProduct({ ...currentProduct, [name]: stockValue, status: updatedStatus });
    } else {
      setCurrentProduct({ ...currentProduct, [name]: value });
    }
  };

  // Handle form input change for adding new product
  const handleAddProductChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
  
    if (name === "stock") {
      const stockValue = parseInt(value, 10) || 0; // ƒê·∫£m b·∫£o stockValue lu√¥n l√† s·ªë
      const updatedStatus =
        stockValue > 10 ? "C√≤n h√†ng" : stockValue > 0 ? "S·∫Øp h·∫øt" : "H·∫øt h√†ng";
  
      setNewProduct((prev) => ({
        ...prev,
        [name]: stockValue,
        status: updatedStatus, // T·ª± ƒë·ªông c·∫≠p nh·∫≠t tr·∫°ng th√°i
      }));
    } else {
      setNewProduct((prev) => ({
        ...prev,
        [name]: value,
      }));
    }
  };
  

  const handleAddProduct = async () => {
    const token = localStorage.getItem("token");
  
    // T√≠nh l·∫°i status tr∆∞·ªõc khi g·ª≠i
    const stock = newProduct.stock;
    const updatedStatus =
      stock > 10 ? "C√≤n h√†ng" : stock > 0 ? "S·∫Øp h·∫øt" : "H·∫øt h√†ng";
  
    const productToAdd = {
      ...newProduct,
      status: updatedStatus,
    };
    console.log("üß™ ƒêang th√™m s·∫£n ph·∫©m:", productToAdd);
    try {
      const res = await API.post("/products", productToAdd, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
  
      // D√πng res.data t·ª´ backend ƒë·ªÉ tr√°nh l·ªói state ch∆∞a c·∫≠p nh·∫≠t k·ªãp
      setProducts([...products, res.data]);
      setIsAddModalOpen(false);
    } catch (error) {
      console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
    }
  };

  const handleDeleteProduct = async (id: string) => {
    const token = localStorage.getItem("token");
    try {
      await API.delete(`/products/${id}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setProducts(products.filter((product) => product._id !== id));
      setIsDeleteModalOpen(false);
    } catch (error) {
      console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
    }
  };


  const handleUpdateProduct = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!currentProduct) return;

    const token = localStorage.getItem("token");

    try {
      await API.put(`/products/${currentProduct._id}`, currentProduct, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      setProducts(
        products.map((p) => (p._id === currentProduct._id ? currentProduct : p))
      );

      setIsEditModalOpen(false);
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", error);
    }
  };

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn ·∫£nh trong modal ch·ªânh s·ª≠a

  const handleEditImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && currentProduct) {
      try {
        // C·∫•u h√¨nh n√©n ·∫£nh
        const options = {
          maxSizeMB: 1, // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc ·∫£nh sau khi n√©n (1MB)
          maxWidthOrHeight: 1280, // Gi·ªõi h·∫°n chi·ªÅu r·ªông ho·∫∑c chi·ªÅu cao
          useWebWorker: true, // S·ª≠ d·ª•ng Web Worker ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t
        };

        // N√©n ·∫£nh
        const compressedFile = await imageCompression(file, options);

        console.log("K√≠ch th∆∞·ªõc ·∫£nh g·ªëc:", file.size / 1024 / 1024, "MB");
        console.log("K√≠ch th∆∞·ªõc ·∫£nh sau khi n√©n:", compressedFile.size / 1024 / 1024, "MB");

        // Chuy·ªÉn ·∫£nh ƒë√£ n√©n sang base64
        const reader = new FileReader();
        reader.onloadend = () => {
          setCurrentProduct((prev) =>
            prev ? { ...prev, image: reader.result as string } : null
          );
        };
        reader.readAsDataURL(compressedFile);
      } catch (error) {
        console.error("L·ªói khi n√©n ·∫£nh:", error);
      }
    }
  };

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn ·∫£nh
  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      try {
        // C·∫•u h√¨nh n√©n ·∫£nh
        const options = {
          maxSizeMB: 1, // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc ·∫£nh sau khi n√©n (1MB)
          maxWidthOrHeight: 1280, // Gi·ªõi h·∫°n chi·ªÅu r·ªông ho·∫∑c chi·ªÅu cao
          useWebWorker: true, // S·ª≠ d·ª•ng Web Worker ƒë·ªÉ c·∫£i thi·ªán hi·ªáu su·∫•t
        };

        // N√©n ·∫£nh
        const compressedFile = await imageCompression(file, options);

        console.log("K√≠ch th∆∞·ªõc ·∫£nh g·ªëc:", file.size / 1024 / 1024, "MB");
        console.log("K√≠ch th∆∞·ªõc ·∫£nh sau khi n√©n:", compressedFile.size / 1024 / 1024, "MB");

        // Chuy·ªÉn ·∫£nh ƒë√£ n√©n sang base64
        const reader = new FileReader();
        reader.onloadend = () => {
          setNewProduct((prev) => ({ ...prev, image: reader.result as string }));
        };
        reader.readAsDataURL(compressedFile);
      } catch (error) {
        console.error("L·ªói khi n√©n ·∫£nh:", error);
      }
    }
  };

  return (
    <>
      <div className="mb-6 flex flex-col justify-between gap-4 md:flex-row md:items-center">
        <h2 className="text-2xl font-bold text-gray-800">Qu·∫£n l√Ω s·∫£n ph·∫©m</h2>
        <div className="flex gap-2">
          <div className="relative">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
            <Input
              type="search"
              placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
              className="pl-8 pr-4"
              value={search}
              onChange={handleSearchChange}
            />
          </div>
              {/* N√∫t m·ªü modal */}
              <Button onClick={() => handleOpenAddModal()} className="bg-orange-100 text-orange-600">

                <Plus className="mr-2 h-4 w-4" />
                Th√™m s·∫£n ph·∫©m
              </Button> 
        </div>
      </div>

      {search && filteredProducts.length === 0 ? (
        <div className="flex flex-col items-center justify-center rounded-lg border border-dashed py-12">
          <FilterX className="mb-3 h-10 w-10 text-gray-400" />
          <h3 className="mb-1 text-lg font-medium">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m</h3>
          <p className="text-sm text-gray-500">
            Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi "{search}"
          </p>
          <Button variant="ghost" className="mt-3" onClick={() => setSearch("")}>
            X√≥a b·ªô l·ªçc
          </Button>
        </div>
      ) : (
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-[50px]">ID</TableHead>
                <TableHead>T√™n s·∫£n ph·∫©m</TableHead>
                <TableHead>Danh m·ª•c</TableHead>
                <TableHead>Gi√°</TableHead>
                <TableHead>S·ªë l∆∞·ª£ng</TableHead>
                <TableHead>Tr·∫°ng th√°i</TableHead>
                <TableHead className="text-right">Thao t√°c</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {currentItems.map((product) => (
                <TableRow key={product._id}>
                  <TableCell className="font-medium">{product._id}</TableCell>
                  <TableCell>{product.title}</TableCell>
                  <TableCell>{product.category}</TableCell>
                  <TableCell>{product.price.toLocaleString()} ƒë</TableCell>
                  <TableCell>{product.stock}</TableCell>
                  <TableCell>
                  <Badge
                    className={`px-2 py-1 rounded-md text-xs font-medium ${
                      product.stock > 10 ? "bg-green-100 text-green-700" : 
                      product.stock > 0 ? "bg-yellow-100 text-yellow-700" : 
                      product.stock === 0 ? "bg-red-100 text-red-700" : 
                      "bg-gray-100 text-gray-700" // M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng kh·ªõp
                    }`}
                  >
                    {product.stock > 10 ? "C√≤n h√†ng" : 
                    product.stock > 0 ? "S·∫Øp h·∫øt" : 
                    product.stock === 0 ? "H·∫øt h√†ng" : 
                    "Kh√¥ng x√°c ƒë·ªãnh"}
                  </Badge>
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end gap-2">
                      
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleOpenEditModal(product)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleOpenDeleteModal(product)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
            
          </Table>
          {filteredProducts.length > itemsPerPage && (
            <div className="flex items-center justify-between px-6 py-4 border-t">
              <div className="text-sm text-gray-500">
                Hi·ªÉn th·ªã {indexOfFirstItem + 1}-{Math.min(indexOfLastItem, filteredProducts.length)} tr√™n {filteredProducts.length} s·∫£n ph·∫©m
              </div>
              <div className="flex gap-1">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => paginate(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                >
                  Tr∆∞·ªõc
                </Button>
                
                {/* Hi·ªÉn th·ªã c√°c s·ªë trang */}
                {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                  let pageNumber;
                  if (totalPages <= 5) {
                    pageNumber = i + 1;
                  } else if (currentPage <= 3) {
                    pageNumber = i + 1;
                  } else if (currentPage >= totalPages - 2) {
                    pageNumber = totalPages - 4 + i;
                  } else {
                    pageNumber = currentPage - 2 + i;
                  }
                  
                  return (
                    <Button
                      key={pageNumber}
                      variant={currentPage === pageNumber ? "default" : "outline"}
                      size="sm"
                      onClick={() => paginate(pageNumber)}
                      className="text-black"
                    >
                      {pageNumber}
                    </Button>
                  );
                })}
                
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => paginate(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                >
                  Sau
                </Button>
              </div>
              
              {/* Dropdown ch·ªçn s·ªë s·∫£n ph·∫©m m·ªói trang */}
              <div className="flex items-center gap-2">
                <span className="text-sm text-gray-500">S·∫£n ph·∫©m m·ªói trang:</span>
                <select
                  value={itemsPerPage}
                  onChange={(e) => {
                    setItemsPerPage(Number(e.target.value));
                    setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu khi thay ƒë·ªïi s·ªë l∆∞·ª£ng
                  }}
                  className="rounded-md border border-gray-300 px-2 py-1 text-sm"
                >
                  <option value="5">5</option>
                  <option value="10">10</option>
                  <option value="15">15</option>
                  <option value="20">20</option>
                </select>
              </div>
            </div>
          )}
        </div>
      )}


      {/* Modal Delete */}
      {isDeleteModalOpen && productToDelete && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-end justify-center px-4 pb-20 pt-4 text-center sm:block sm:p-0">
            <div
              className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
              onClick={() => setIsDeleteModalOpen(false)}
            ></div>
            <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>
            <div className="inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle">
              <div className="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                    <button
                      onClick={() => handleOpenDeleteModal(productToDelete)}
                      className="text-red-600 hover:text-red-900"
                      title="X√≥a"
                    >
                      <Trash2 className="h-5 w-5" />
                    </button>
                  </div>
                  <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                    <h3 className="text-lg font-semibold leading-6 text-gray-900">
                      X√≥a s·∫£n ph·∫©m
                    </h3>
                    <div className="mt-2">
                      <p className="text-sm text-gray-500">
                        B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m "{productToDelete.title}"? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ kh√¥i ph·ª•c.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                <button
                  type="button"
                  className="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto"
                  onClick={() => productToDelete && handleDeleteProduct(productToDelete._id)}
                >
                  X√≥a
                </button>
                <button
                  type="button"
                  className="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto"
                  onClick={() => setIsDeleteModalOpen(false)}
                >
                  H·ªßy
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modal Edit */}
      {isEditModalOpen && currentProduct && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-end justify-center px-4 pb-20 pt-4 text-center sm:block sm:p-0">
            <div
              className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
              onClick={() => setIsEditModalOpen(false)}
            ></div>
            <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>
            <div className="inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle">
              <div className="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
                <button
                  type="button"
                  className="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none"
                  onClick={() => setIsEditModalOpen(false)}
                >
                  <span className="sr-only">ƒê√≥ng</span>
                  <XMarkIcon className="h-6 w-6" />
                </button>
              </div>
              <div className="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left w-full">
                    <h3 className="text-lg font-semibold leading-6 text-gray-900">
                      Ch·ªânh s·ª≠a th√¥ng tin s·∫£n ph·∫©m
                    </h3>
                    <form onSubmit={handleUpdateProduct} className="mt-4">
                      <div className="grid gap-4 sm:grid-cols-2">
                        <div className="sm:col-span-2">
                          <label htmlFor="edit-title" className="block text-sm font-medium text-gray-700">
                            T√™n s·∫£n ph·∫©m <span className="text-red-500">*</span>
                          </label>
                          <input
                            type="text"
                            id="edit-title"
                            name="title"
                            value={currentProduct.title}
                            onChange={handleEditProductChange}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                            required
                          />
                        </div>

                        <div>
                          <label htmlFor="edit-category" className="block text-sm font-medium text-gray-700">
                            Danh m·ª•c <span className="text-red-500">*</span>
                          </label>
                          <input
                            type="text"
                            id="edit-category"
                            name="category"
                            value={currentProduct.category}
                            onChange={handleEditProductChange}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                            required
                          />
                        </div>

                        <div>
                          <label htmlFor="edit-price" className="block text-sm font-medium text-gray-700">
                            Gi√° <span className="text-red-500">*</span>
                          </label>
                          <input
                            type="number"
                            id="edit-price"
                            name="price"
                            value={currentProduct.price}
                            onChange={handleEditProductChange}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                            required
                          />
                        </div>

                        <div>
                          <label htmlFor="edit-stock" className="block text-sm font-medium text-gray-700">
                            S·ªë l∆∞·ª£ng <span className="text-red-500">*</span>
                          </label>
                          <input
                            type="number"
                            id="edit-stock"
                            name="stock"
                            value={currentProduct.stock}
                            onChange={handleEditProductChange}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                            required
                          />
                        </div>

                        <div>
                          <label htmlFor="edit-status" className="block text-sm font-medium text-gray-700">
                            Tr·∫°ng th√°i
                          </label>
                          <select
                            id="edit-status"
                            name="status"
                            value={currentProduct.status}
                            onChange={handleEditProductChange}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                          >
                            <option value="C√≤n h√†ng">C√≤n h√†ng</option>
                            <option value="S·∫Øp h·∫øt">S·∫Øp h·∫øt</option>
                            <option value="H·∫øt h√†ng">H·∫øt h√†ng</option>
                          </select>
                        </div>

                        <div>
                          <label htmlFor="edit-image" className="block text-sm font-medium text-gray-700">
                            ·∫¢nh s·∫£n ph·∫©m
                          </label>
                          <input
                            type="file"
                            id="edit-image"
                            name="image"
                            accept="image/*"
                            onChange={handleEditImageUpload}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                          />
                        </div>

                        {/* Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i n·∫øu ƒë√£ c√≥ */}
                        {currentProduct?.image && (
                          <div className="mt-2">
                            <p className="text-sm text-gray-600">·∫¢nh hi·ªán t·∫°i:</p>
                            <img src={currentProduct.image} alt="·∫¢nh s·∫£n ph·∫©m" className="mt-1 h-32 w-32 rounded-md border" />
                          </div>
                        )}

                      </div>
                      <div className="mt-4 flex justify-end gap-2">
                        <Button
                          variant="outline"
                          onClick={() => setIsEditModalOpen(false)}
                          className="bg-gray-100 text-gray-600"
                        >
                          H·ªßy
                        </Button>
                        <Button
                          type="submit"
                          className="bg-green-600 text-white"
                        >
                          L∆∞u thay ƒë·ªïi
                        </Button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}


      {/* Modal Th√™m S·∫£n Ph·∫©m */}
      {isAddModalOpen && newProduct && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-end justify-center px-4 pb-20 pt-4 text-center sm:block sm:p-0">
            <div
              className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
              onClick={() => setIsAddModalOpen(false)}
            ></div>
            <span className="hidden sm:inline-block sm:h-screen sm:align-middle">&#8203;</span>
            
            <div className="inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle">
              <div className="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
                  <button
                    type="button"
                    className="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none"
                    onClick={() => setIsAddModalOpen(false)}
                  >
                    <span className="sr-only">ƒê√≥ng</span>
                    <XMarkIcon className="h-6 w-6" />
                  </button>
              </div>
              <div className="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left w-full">
                    <h3 className="text-lg font-semibold leading-6 text-gray-900">
                      Th√™m s·∫£n ph·∫©m m·ªõi
                    </h3>
                    <form onSubmit={handleAddProduct} className="mt-4">
                      <div className="grid gap-4 sm:grid-cols-2">
                        <div>
                          <label htmlFor="title" className="block text-sm font-medium text-gray-700">
                            T√™n s·∫£n ph·∫©m <span className="text-red-500">*</span>
                          </label>
                          <input
                            type="text"
                            id="title"
                            name="title"
                            value={newProduct.title}
                            onChange={handleAddProductChange}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                            required
                          />
                        </div>

                        <div>
                          <label htmlFor="category" className="block text-sm font-medium text-gray-700">
                            Danh m·ª•c <span className="text-red-500">*</span>
                          </label>
                          <input
                            type="text"
                            id="category"
                            name="category"
                            value={newProduct.category}
                            onChange={handleAddProductChange}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                            required
                          />
                        </div>

                        <div>
                          <label htmlFor="price" className="block text-sm font-medium text-gray-700">
                            Gi√° <span className="text-red-500">*</span>
                          </label>
                          <input
                            type="number"
                            id="price"
                            name="price"
                            value={newProduct.price}
                            onChange={handleAddProductChange}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                            required
                          />
                        </div>

                        <div>
                          <label htmlFor="stock" className="block text-sm font-medium text-gray-700">
                            S·ªë l∆∞·ª£ng <span className="text-red-500">*</span>
                          </label>
                          <input
                            type="number"
                            id="stock"
                            name="stock"
                            value={newProduct.stock}
                            onChange={handleAddProductChange}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                            required
                          />
                        </div>

                        <div>
                          <label htmlFor="edit-status" className="block text-sm font-medium text-gray-700">
                            Tr·∫°ng th√°i
                          </label>
                          <select
                            id="edit-status"
                            name="status"
                            value={newProduct.status}
                            onChange={handleEditProductChange}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                            aria-readonly
                          >
                            <option value="C√≤n h√†ng">C√≤n h√†ng</option>
                            <option value="S·∫Øp h·∫øt">S·∫Øp h·∫øt</option>
                            <option value="H·∫øt h√†ng">H·∫øt h√†ng</option>
                          </select>
                        </div>

                        <div>
                          <label htmlFor="image" className="block text-sm font-medium text-gray-700">
                            ·∫¢nh s·∫£n ph·∫©m <span className="text-red-500">*</span>
                          </label>
                          <input
                            type="file"
                            id="image"
                            name="image"
                            accept="image/*"
                            onChange={handleImageUpload}
                            className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-yellow-500 focus:outline-none focus:ring-yellow-500"
                            required
                          />
                        </div>

                        {/* Hi·ªÉn th·ªã ·∫£nh xem tr∆∞·ªõc n·∫øu ƒë√£ ch·ªçn */}
                        {newProduct.image && (
                          <div className="mt-2">
                            <p className="text-sm text-gray-600">·∫¢nh xem tr∆∞·ªõc:</p>
                            <img src={newProduct.image} alt="·∫¢nh s·∫£n ph·∫©m" className="mt-1 h-32 w-32 rounded-md border" />
                          </div>
                        )}
                      </div>

                      <div className="mt-4 flex justify-end gap-3">
                        <button
                          type="button"
                          className="inline-flex w-full justify-center rounded-md bg-gray-300 text-gray-900 px-4 py-2 text-sm font-semibold shadow-sm hover:bg-gray-400 sm:w-auto"
                          onClick={() => setIsAddModalOpen(false)}
                        >
                          H·ªßy
                        </button>
                        <button
                          type="submit"
                          className="inline-flex w-full justify-center rounded-md bg-green-600 text-white text-white px-4 py-2 text-sm font-semibold shadow-sm hover:bg-green-500 sm:w-auto"
                        >
                          L∆∞u s·∫£n ph·∫©m
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

    </>
  );
}
